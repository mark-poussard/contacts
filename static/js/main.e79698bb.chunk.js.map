{"version":3,"sources":["model/deserialization/DtoHelper.ts","view/components/icon/FontAwesome.tsx","view/components/async/Loader.tsx","view/components/async/LoadData.tsx","model/util/Color.ts","model/contacts/Contact.ts","business/network/DataStore.ts","view/ContactIcon.tsx","view/ContactEntry.tsx","view/components/Email.tsx","view/components/Phone.tsx","view/ContactDetail.tsx","view/ContactList.tsx","App.tsx","index.tsx"],"names":["FieldType","createIconComponent","iconName","props","react_default","a","createElement","react_fontawesome_index_es","Object","assign","icon","LoaderIcon","PhoneIcon","EmailIcon","Loader","className","style","show","leftoverProps","objectWithoutProperties","cleanShow","cleanClassName","mergedStyle","display","concat","spin","color","LoadData","_useState","useState","_useState2","slicedToArray","promiseValue","setPromiseValue","promise","then","value","components_async_Loader","Fragment","children","deserialization_DtoHelper","assertField","dto","fieldName","hasOwnProperty","Error","assertOptionalField","fieldType","_this","assertType","assertFieldAndType","field","isType","NUMBER","STRING","BOOLEAN","OBJECT","ARRAY","Array","isArray","Color","red","green","blue","alpha","this","classCallCheck","lighten","darken","getTextColor","toCssString","RED","GREEN","BLUE","GRAY","fromHexString","hexString","parseInt","substr","Contact","id","firstname","lastname","email","phone","getId","getFirstName","getLastName","getEmail","getPhone","getFullName","getColor","str","hash","i","length","charCodeAt","colour","toString","stringToHexColour","getInitials","toLocaleUpperCase","fromDto","DtoHelper","network_DataStore","getContacts","fetch","response","ok","json","map","x","idx","ContactIcon","iconColor","contact","backgroundColor","small","width","height","fontSize","marginLeft","transform","marginTop","marginBottom","ContactEntry","onClick","src_view_ContactIcon","Email","href","Phone","ContactDetail","onClose","components_Email","components_Phone","ContactList","contactDetail","setContactDetail","contacts","src_view_ContactEntry","key","src_view_ContactDetail","App","async_LoadData","DataStore","view_ContactList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e79698bb.chunk.js","sourcesContent":["class DtoHelper{\n\n    assertField = (dto : any, fieldName : string) => {\n        if(!dto.hasOwnProperty(fieldName)){\n            throw new Error(`Invalid dto did not have required field ${fieldName}`);\n        }\n    }\n\n    assertOptionalField = (dto : any, fieldName : string, fieldType : FieldType) => {\n        if(dto.hasOwnProperty(fieldName) && dto[fieldName] != null){\n            this.assertType(dto, fieldName, fieldType);\n        }\n    }\n\n    assertFieldAndType = (dto : any, fieldName : string, fieldType : FieldType) => {\n        this.assertField(dto, fieldName);\n        this.assertType(dto, fieldName, fieldType);\n    }\n\n    assertType = (dto : any, fieldName : string, fieldType : FieldType) => {\n        const field = dto[fieldName];\n        if(!this.isType(field, fieldType)){\n            throw new Error(`Invalid dto had field of invalid type ${fieldName} expected ${fieldType}`);\n        }\n    }\n\n    isType = (field : any, fieldType : FieldType) => {\n        switch(fieldType){\n            case FieldType.NUMBER:\n                return typeof field === \"number\";\n            case FieldType.STRING:\n                return typeof field === \"string\";\n            case FieldType.BOOLEAN:\n                return typeof field === \"boolean\";\n            case FieldType.OBJECT:\n                return typeof field === \"object\";\n            case FieldType.ARRAY:\n                return Array.isArray(field);\n        }\n    }\n}\n\nexport default new DtoHelper();\n\nexport enum FieldType{\n    STRING,\n    NUMBER,\n    BOOLEAN,\n    OBJECT,\n    ARRAY\n}","import React from 'react';\nimport fontawesome from '@fortawesome/fontawesome';\nimport { IconProp, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome';\nimport { faCircleNotch, faPhone, faEnvelopeOpen } from '@fortawesome/fontawesome-free-solid';\n\nexport const fontAwesomeInit = () => {\n    // solid\n    fontawesome.library.add(faCircleNotch);\n    fontawesome.library.add(faPhone);\n    fontawesome.library.add(faEnvelopeOpen);\n};\n\nexport type IconPropsType = Omit<FontAwesomeIconProps, \"icon\">\n\nconst createIconComponent = (iconName : IconProp) => {\n    return (props : IconPropsType) => \n    <FontAwesomeIcon icon={iconName} {...props} />\n}\n\nexport const LoaderIcon = createIconComponent(\"circle-notch\");\nexport const PhoneIcon = createIconComponent(\"phone\");\nexport const EmailIcon = createIconComponent(\"envelope-open\");","import React from 'react';\nimport { LoaderIcon } from '../icon/FontAwesome';\nimport './Loader.scss';\n\ninterface ILoaderProps extends React.HTMLAttributes<HTMLDivElement>{\n    show ?: boolean;\n}\n\nconst Loader : React.FunctionComponent<ILoaderProps> = props => {\n    const {className, style, show, ...leftoverProps} = props;\n    const cleanShow = (show != null)?show:true;\n    const cleanClassName = (className != null) ? className : \"\";\n    const mergedStyle = Object.assign({\n        display : (cleanShow)?\"initial\":\"none\"\n    }, style);\n    return (\n        <div className={`Loader ${cleanClassName}`} \n            style={mergedStyle}\n            {...leftoverProps}>\n            <LoaderIcon spin color={\"gray\"}/>\n        </div>\n    )\n}\nexport default Loader;","import React, { useState } from 'react';\nimport Loader from './Loader';\n\ninterface ILoadComponentProps<T>{\n    promise : Promise<T>;\n    children : (value : T) => React.ReactNode;\n}\n\nconst LoadData = <T extends unknown> (props : ILoadComponentProps<T>) => {\n    const [promiseValue, setPromiseValue] = useState<T | null>(null);\n    props.promise.then(value => {\n        setPromiseValue(value);\n    });\n    if(promiseValue == null){\n        return <Loader />\n    }\n    return (\n        <>\n            {props.children(promiseValue)}\n        </>\n    );\n}\nexport default LoadData;","export default class Color{\n    red : number;\n    green : number;\n    blue : number;\n    alpha : number;\n\n    constructor(red : number, green : number, blue : number, alpha : number){\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n        this.alpha = alpha;\n    }\n\n    lighten = (value : number) => {\n        const red = (this.red + value <= 255)?(this.red + value):(255);\n        const green = (this.green + value <= 255)?(this.green + value):(255);\n        const blue = (this.blue + value <= 255)?(this.blue + value):(255);\n        return new Color(red, green, blue, this.alpha);\n    }\n\n    darken = (value : number) => {\n        const red = (this.red - value >= 0)?(this.red - value):(0);\n        const green = (this.green - value >= 0)?(this.green - value):(0);\n        const blue = (this.blue - value >= 0)?(this.blue - value):(0);\n        return new Color(red, green, blue, this.alpha);\n    }\n\n    getTextColor = () => {\n        if ((this.red*0.299 + this.green*0.587 + this.blue*0.114) > 150) \n            return new Color(0, 0, 0, 1);\n        return new Color(255, 255, 255, 1);\n    }\n\n    toCssString = () => {\n        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n    }\n\n    static RED = new Color(255, 0, 0, 1);\n    static GREEN = new Color(0, 255, 0, 1);\n    static BLUE = new Color(0, 0, 255, 1);\n    static GRAY = new Color(128, 128, 128, 1);\n\n    static fromHexString = (hexString : string) => {\n        const red = parseInt(hexString.substr(1, 2), 16);\n        const green = parseInt(hexString.substr(3, 2), 16);\n        const blue = parseInt(hexString.substr(5, 2), 16);\n        return new Color(red, green, blue, 1);\n    }\n}\n\nexport const stringToHexColour = (str : string) => {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let colour = '#';\n    for (let i = 0; i < 3; i++) {\n        const value = (hash >> (i * 8)) & 0xFF;\n        colour += ('00' + value.toString(16)).substr(-2);\n    }\n    return Color.fromHexString(colour);\n}","import DtoHelper, { FieldType } from '../deserialization/DtoHelper';\nimport { stringToHexColour } from '../util/Color';\n\nexport default class Contact{\n\n    private id : number;\n    private firstname : string;\n    private lastname : string;\n    private email : string;\n    private phone : string;\n\n    constructor(id : number, firstname : string, lastname : string, email : string, phone : string){\n        this.id = id;\n        this.firstname = firstname;\n        this.lastname = lastname;\n        this.email = email;\n        this.phone = phone;\n    }\n\n    getId = () => this.id;\n    getFirstName = () => this.firstname;\n    getLastName = () => this.lastname;\n    getEmail = () => this.email;\n    getPhone = () => this.phone;\n\n    getFullName = () => {\n        return this.getFirstName() + \" \" + this.getLastName();\n    }\n\n    getColor = () => {\n        return stringToHexColour(this.getFirstName() + this.getLastName());\n    }\n\n    getInitials = () => {\n        return this.getFirstName()[0].toLocaleUpperCase() + this.getLastName()[0].toLocaleUpperCase()\n    }\n\n    static fromDto = (dto : any, id : number) => {\n        DtoHelper.assertFieldAndType(dto, \"firstname\", FieldType.STRING);\n        const firstname = dto.firstname;\n\n        DtoHelper.assertFieldAndType(dto, \"lastname\", FieldType.STRING);\n        const lastname = dto.lastname;\n\n        DtoHelper.assertFieldAndType(dto, \"email\", FieldType.STRING);\n        const email = dto.email;\n\n        DtoHelper.assertFieldAndType(dto, \"phone\", FieldType.STRING);\n        const phone = dto.phone;\n\n        return new Contact(id, firstname, lastname, email, phone);\n    }\n}","import Contact from \"../../model/contacts/Contact\";\n\nconst DATA_STORE_ENDPOINT = \"https://gist.githubusercontent.com/mark-poussard/d9f54694ae06cf92c8528725d30f7c2c/raw/contacts.json\";\n\nclass DataStore{\n    \n    getContacts = () => {\n        return fetch(DATA_STORE_ENDPOINT)\n            .then(response => {\n                if(response.ok){\n                    return response.json();\n                }\n                throw new Error(\"Couldn't reach data store.\");\n            })\n            .then((dto : any[]) => dto.map((x:any, idx : number) => Contact.fromDto(x, idx)));\n    }\n\n}\nexport default new DataStore();","import React from 'react';\nimport Contact from '../model/contacts/Contact';\nimport './ContactIcon.scss';\n\ninterface IContactIconProps{\n    contact : Contact;\n    small ?: boolean;\n}\n\nconst ContactIcon : React.FunctionComponent<IContactIconProps> = props => {\n    const iconColor = props.contact.getColor();\n    const smallStyle = {\n        width: \"50px\",\n        height: \"50px\",\n        display: \"inline-block\",\n    }\n    const bigStyle = {\n        width: \"25vw\",\n        height: \"25vw\",\n        fontSize: \"10vw\",\n        marginLeft: \"50%\",\n        transform: \"translateX(-50%)\",\n        marginTop: \"20px\",\n        marginBottom: \"20px\",\n    }\n    const style = Object.assign({\n        backgroundColor : iconColor.toCssString(),\n        color : iconColor.getTextColor().toCssString(),\n    }, (props.small ? smallStyle : bigStyle));\n    return (\n        <div className={`ContactIcon`}\n            style={style}>\n            <span className={`content`}>\n                {props.contact.getInitials()}\n            </span>\n        </div>\n    );\n}\nexport default ContactIcon;","import React from 'react';\nimport Contact from '../model/contacts/Contact';\nimport ContactIcon from './ContactIcon';\nimport './ContactEntry.scss';\n\ninterface IContactEntryProps{\n    contact : Contact;\n    onClick ?: () => void;\n}\n\nconst ContactEntry : React.FunctionComponent<IContactEntryProps> = props => {\n    return (\n        <div className={`ContactEntry`}\n            onClick={props.onClick}>\n            <ContactIcon contact={props.contact} small/>\n            <span>{props.contact.getFullName()}</span>\n        </div>\n    );\n}\nexport default ContactEntry;","import React from 'react';\nimport { EmailIcon } from './icon/FontAwesome';\n\ninterface IEmailProps{\n    email : string;\n}\n\nconst Email : React.FunctionComponent<IEmailProps> = props => {\n    return (\n        <div>\n            <EmailIcon />\n            <a href={`mailto:${props.email}`}>{props.email}</a>\n        </div>\n    );\n}\nexport default Email;","import React from 'react';\nimport { PhoneIcon } from './icon/FontAwesome';\n\ninterface IPhoneProps{\n    phone : string;\n}\n\nconst Phone : React.FunctionComponent<IPhoneProps> = props => {\n    return (\n        <div>\n            <PhoneIcon />\n            <a href={`tel:${props.phone}`}>{props.phone}</a>\n        </div>\n    )\n}\nexport default Phone;","import React from 'react';\nimport Email from './components/Email';\nimport Phone from './components/Phone';\nimport Contact from '../model/contacts/Contact';\nimport './ContactDetail.scss';\nimport ContactIcon from './ContactIcon';\n\ninterface IContactDetailProps{\n    contact : Contact;\n    onClose ?: () => void;\n}\n\nconst ContactDetail : React.FunctionComponent<IContactDetailProps> = props => {\n    return (\n        <div className={`ContactDetail`} onClick={props.onClose}>\n            <div className={`contact-detail-content`}>\n                <ContactIcon contact={props.contact} />\n                <span>{props.contact.getFullName()}</span>\n                <Email email={props.contact.getEmail()} />\n                <Phone phone={props.contact.getPhone()} />\n            </div>\n        </div>\n    );\n}\nexport default ContactDetail;","import React, { useState } from 'react';\nimport Contact from '../model/contacts/Contact';\nimport ContactEntry from './ContactEntry';\nimport ContactDetail from './ContactDetail';\n\ninterface IContactListProps{\n    contacts : Contact[];\n}\n\nconst ContactList : React.FunctionComponent<IContactListProps> = props => {\n    const [contactDetail, setContactDetail] = useState<Contact | null>(null);\n\n    return (\n        <div>\n            {props.contacts.map(contact => \n                <ContactEntry key={contact.getId()} \n                    contact={contact}\n                    onClick={() => setContactDetail(contact)}/>\n            )}\n            {contactDetail &&\n                <ContactDetail contact={contactDetail} \n                    onClose={() => setContactDetail(null)}/>\n            }\n        </div>\n    )\n}\nexport default ContactList;","import React from 'react';\nimport LoadData from './view/components/async/LoadData';\nimport DataStore from './business/network/DataStore';\nimport ContactList from './view/ContactList';\nimport './App.scss';\n\nconst App : React.FunctionComponent = props => {\n  return (\n    <div className={`App`}>\n      <LoadData promise={DataStore.getContacts()}>\n        {contacts => (\n          <ContactList contacts={contacts}/>\n        )}\n      </LoadData>\n    </div>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}